name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.24'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.24-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.24-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run unit tests
      run: go test -short -race -coverprofile=coverage.out ./...

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.24'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.24-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.24-

    - name: Download dependencies
      run: go mod download

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=5m

    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Check go mod tidy
      run: |
        go mod tidy
        if ! git diff --quiet go.mod go.sum; then
          echo "go mod tidy resulted in changes"
          git diff go.mod go.sum
          exit 1
        fi

  build:
    name: Build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.24'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.24-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.24-

    - name: Download dependencies
      run: go mod download

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p dist
        if [ "$GOOS" = "windows" ]; then
          go build -o dist/qbt-tui-${{ matrix.goos }}-${{ matrix.goarch }}.exe ./cmd/qbt-tui
        else
          go build -o dist/qbt-tui-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/qbt-tui
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: qbt-tui-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.24'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.24-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.24-

    - name: Download dependencies
      run: go mod download

    - name: Start qBittorrent test instance
      run: docker compose -f docker-compose.test.yml up -d --wait

    - name: Run integration tests
      env:
        QBT_TEST_PASSWORD: testpass123
      run: go test -v -tags=integration ./internal/api

    - name: Stop test containers
      if: always()
      run: docker compose -f docker-compose.test.yml down -v


  validate:
    name: Full Validation
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.24'

    - name: Download dependencies
      run: go mod download

    - name: Install development tools
      run: make install-tools

    - name: Run make validate
      run: make validate
